version: '3.8'

services:
  # FalkorDB Graph Database
  falkordb:
    image: falkordb/falkordb:latest
    container_name: tkg_falkordb
    environment:
      - REDIS_ARGS=--requirepass falkordb
      - FALKORDB_ARGS=THREAD_COUNT 4
    ports:
      - "6380:6379"  # Changed port to avoid conflicts
      - "3001:3000"  # FalkorDB browser interface
    volumes:
      - falkordb_data:/var/lib/falkordb/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "-a", "falkordb", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # PostgreSQL Database (for metadata and user data)
  postgres:
    image: postgres:15
    container_name: tkg_postgres
    environment:
      POSTGRES_DB: tkg_context
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (for session and caching)
  redis:
    image: redis:7-alpine
    container_name: tkg_redis
    ports:
      - "6378:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tkg_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/tkg_context
      - REDIS_URL=redis://redis:6379
      - FALKORDB_HOST=falkordb
      - FALKORDB_PORT=6379
      - FALKORDB_PASSWORD=falkordb
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      falkordb:
        condition: service_healthy
    volumes:
      - ./backend:/app
    working_dir: /app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Web UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tkg_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    working_dir: /app
    command: yarn dev

volumes:
  postgres_data:
  redis_data:
  falkordb_data: